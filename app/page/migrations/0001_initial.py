# Generated by Django 3.2.12 on 2022-02-16 05:18

from django.db import migrations, models
import django.db.models.deletion
import django.forms.widgets
import modelcluster.fields
import page.blocks.custom_choice_block
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtailcache.cache


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0062_comment_models_and_pagesubscription'),
        ('mediamodels', '0002_auto_20210809_0949'),
        ('wagtailimages', '0023_add_choose_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('thank_you_text', wagtail.core.fields.RichTextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('header-menu', 'Header Menu')], max_length=30)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('socials', wagtail.core.fields.StreamField([('social_item', wagtail.core.blocks.StructBlock([('icon_class', page.blocks.custom_choice_block.CustomChoiceBlock(choices=(('fab fa-facebook', 'Facebook'), ('fab fa-twitter', 'Twitter'), ('fab fa-linkedin-in', 'LinkedIn'), ('fab fa-instagram', 'Instagram'), ('fab fa-tiktok', 'TikTok'), ('fab fa-youtube', 'YouTube'), ('fab fa-spotify', 'Spotify')), default='fab fa-facebook', label='Social', widget=django.forms.widgets.RadioSelect)), ('link', wagtail.core.blocks.URLBlock())]))], blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('menu_link', wagtail.core.fields.StreamField([('link_block', wagtail.core.blocks.StructBlock([('link_type', page.blocks.custom_choice_block.CustomChoiceBlock(choices=(('url', 'URL'), ('page', 'Page'), ('document', 'Document'), ('anchor', 'Anchor')), default='url', label='Type', required=False, widget=django.forms.widgets.RadioSelect)), ('url', wagtail.core.blocks.CharBlock(label='URL', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)), ('anchor', wagtail.core.blocks.CharBlock(help_text='This will only work properly if there is an anchor block dropped on the home page', required=False)), ('link_text', wagtail.core.blocks.CharBlock(label='Text', required=False))]))], blank=True, null=True)),
                ('sub_menu', wagtail.core.fields.StreamField([('submenu_block', wagtail.core.blocks.StructBlock([('link_type', page.blocks.custom_choice_block.CustomChoiceBlock(choices=(('url', 'URL'), ('page', 'Page'), ('document', 'Document'), ('anchor', 'Anchor')), default='url', label='Type', required=False, widget=django.forms.widgets.RadioSelect)), ('url', wagtail.core.blocks.CharBlock(label='URL', required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)), ('anchor', wagtail.core.blocks.CharBlock(help_text='This will only work properly if there is an anchor block dropped on the home page', required=False)), ('link_text', wagtail.core.blocks.CharBlock(label='Text', required=False))]))], blank=True, null=True)),
                ('open_in_new_tab', models.BooleanField(blank=True, default=False)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='page.menu')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HeaderFooter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('footer_contact_text', models.CharField(blank=True, default='', help_text='The text that shows above the footer contact button.', max_length=512, null=True, verbose_name='Footer contact text')),
                ('copyright_text', models.CharField(blank=True, default='', help_text='Enter the text that should appear after the year in the copyright line.', max_length=512, null=True, verbose_name='Copyright text')),
                ('footer_address_1', models.CharField(blank=True, default='', max_length=512, null=True)),
                ('footer_address_2', models.CharField(blank=True, default='', max_length=512, null=True)),
                ('footer_email', models.CharField(blank=True, default='', max_length=512, null=True)),
                ('footer_phone', models.CharField(blank=True, default='', max_length=512, null=True)),
                ('footer_contact_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailcore.page')),
                ('footer_logo', models.ForeignKey(blank=True, help_text='Logo used in footer. Recommended transparent PNG', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='footer_logo', to='mediamodels.customimage')),
                ('header_logo', models.ForeignKey(blank=True, help_text='Logo used in header. Recommended transparent PNG', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='header_logo', to='mediamodels.customimage')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'verbose_name': 'Header & Footer',
            },
        ),
        migrations.CreateModel(
            name='FormSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mail_form_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailcore.page')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='page.formpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DefaultPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('canonical_url', models.CharField(blank=True, help_text='Leave this blank unless you know there is a canonical URL for this content.', max_length=255, null=True, verbose_name='Canonical URL')),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True, verbose_name='Meta Keywords')),
                ('exclude_from_sitemap', models.BooleanField(default=False, help_text='Removes this page from sitemap.xml')),
                ('og_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='OG:Title')),
                ('og_type', models.CharField(blank=True, max_length=255, null=True, verbose_name='OG:Type')),
                ('og_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='OG:URL')),
                ('og_description', models.CharField(blank=True, max_length=255, null=True, verbose_name='OG:Description')),
                ('body', wagtail.core.fields.StreamField([], blank=True, null=True)),
                ('og_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='page_og_image', to='wagtailimages.image', verbose_name='OG:Image')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailcache.cache.WagtailCacheMixin, 'wagtailcore.page'),
        ),
    ]
